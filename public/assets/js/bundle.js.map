{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA,IAAMA,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;AACnD,IAAMC,GAAG,GAAGF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;AACjD,IAAIE,cAAc,GAAG,KAAK,CAAC,CAAC;;AAE5B;AACAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC,CAC/CC,IAAI,CAAC,UAASC,MAAM,EAAE;EACnB,IAAMC,YAAY,GAAG,IAAIC,YAAY,CAAC,CAAC;EACvC,IAAMC,QAAQ,GAAGF,YAAY,CAACG,cAAc,CAAC,CAAC;EAC9C,IAAMC,UAAU,GAAGJ,YAAY,CAACK,uBAAuB,CAACN,MAAM,CAAC;EAC/DK,UAAU,CAACE,OAAO,CAACJ,QAAQ,CAAC;;EAE5B;EACAA,QAAQ,CAACK,OAAO,GAAG,IAAI;EACvB,IAAMC,YAAY,GAAGN,QAAQ,CAACO,iBAAiB;EAC/C,IAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;;EAE9C;EACA,SAASI,YAAYA,CAAA,EAAG;IACpBV,QAAQ,CAACW,oBAAoB,CAACH,SAAS,CAAC;IACxC,IAAII,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAAC,KAAA,CAARF,IAAI,EAAAG,kBAAA,CAAQR,SAAS,EAAC;IACzCS,OAAO,CAACC,GAAG,CAACN,YAAY,CAAC;IACzB,IAAIA,YAAY,IAAI,GAAG,EAAE;MACrB,IAAI,CAACrB,cAAc,EAAE;QACjBA,cAAc,GAAG,IAAI;QACrBJ,KAAK,CAACgC,KAAK,CAACC,OAAO,GAAG,MAAM;QAC5B9B,GAAG,CAAC6B,KAAK,CAACC,OAAO,GAAG,OAAO;QAC3B9B,GAAG,CAAC+B,GAAG,GAAG/B,GAAG,CAAC+B,GAAG,CAAC,CAAC;QACnBC,UAAU,CAAC,YAAW;UAClBhC,GAAG,CAAC6B,KAAK,CAACC,OAAO,GAAG,MAAM;UAC1BjC,KAAK,CAACgC,KAAK,CAACC,OAAO,GAAG,OAAO;UAC7B7B,cAAc,GAAG,KAAK;UACtBmB,YAAY,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,EAAE,IAAI,CAAC;MACZ;IACJ;IACA;IACAY,UAAU,CAACZ,YAAY,EAAE,GAAG,CAAC;EACjC;EAEAA,YAAY,CAAC,CAAC;AAClB,CAAC,CAAC,SACI,CAAC,UAASa,GAAG,EAAE;EACjBN,OAAO,CAACO,KAAK,CAAC,+BAA+B,GAAGD,GAAG,CAAC;AACxD,CAAC,CAAC,C","sources":["webpack://webpack/./src/main.js"],"sourcesContent":["const image = document.getElementById('madara-img');\r\nconst gif = document.getElementById('madara-gif');\r\nlet isGifDisplayed = false; // Adiciona uma variável para controlar se o GIF está sendo exibido\r\n\r\n// Obtendo o áudio do usuário\r\nnavigator.mediaDevices.getUserMedia({ audio: true })\r\n    .then(function(stream) {\r\n        const audioContext = new AudioContext();\r\n        const analyser = audioContext.createAnalyser();\r\n        const microphone = audioContext.createMediaStreamSource(stream);\r\n        microphone.connect(analyser);\r\n\r\n        // Configurando a análise de áudio\r\n        analyser.fftSize = 2048;\r\n        const bufferLength = analyser.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n\r\n        // Função para processar os dados de áudio\r\n        function processAudio() {\r\n            analyser.getByteFrequencyData(dataArray);\r\n            let maxFrequency = Math.max(...dataArray);\r\n            console.log(maxFrequency);\r\n            if (maxFrequency >= 200) {\r\n                if (!isGifDisplayed) {\r\n                    isGifDisplayed = true;\r\n                    image.style.display = 'none';\r\n                    gif.style.display = 'block';\r\n                    gif.src = gif.src; // Reinicia a animação do GIF\r\n                    setTimeout(function() {\r\n                        gif.style.display = 'none';\r\n                        image.style.display = 'block';\r\n                        isGifDisplayed = false;\r\n                        processAudio(); // Chama a função novamente após o tempo determinado\r\n                    }, 3000);\r\n                }\r\n            }\r\n            // Chamando a função novamente de forma assíncrona\r\n            setTimeout(processAudio, 100);\r\n        }\r\n\r\n        processAudio();\r\n    })\r\n    .catch(function(err) {\r\n        console.error('Erro ao acessar o microfone: ' + err);\r\n    });\r\n"],"names":["image","document","getElementById","gif","isGifDisplayed","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","AudioContext","analyser","createAnalyser","microphone","createMediaStreamSource","connect","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","processAudio","getByteFrequencyData","maxFrequency","Math","max","apply","_toConsumableArray","console","log","style","display","src","setTimeout","err","error"],"sourceRoot":""}